#!/bin/bash-*-Shell-script-functions*-

###########################################################################
### Author:  Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
###
### Version - 1.1
###
###   1.1 Sun Mar 06 2022
###   1.0 Fri Dec 04 2020
###########################################################################

set +u

export MY_COMPILING_SYTEMS="gnu, intel, pgi"
export MY_COMPILING_PLATFORMS="custom, linux, macosx, cheyenne, gaea, hera, jet, orion, stampede, wcoss, mistral, strand"

########################################
##### Atmospheric components
MY_ATM_MODS="ATMESH PAHM"
#MY_ATM_MODS="ATMESH WRF HWRF PAHM"

##### Ocean components
MY_OCN_MODS="ADCIRC"
#MY_OCN_MODS="ADCIRC SCHISM FVCOM ROMS"

##### Hydrologic components
MY_HYD_MODS="NWM"

##### Wave components
MY_WAV_MODS="WW3DATA WW3"

##### Miscellaneous components
MY_MSC_MODS="BARDATA"
########################################

export MY_COMPONENT_DEFAULT="ADCIRC WW3DATA ATMESH"
export MY_COMPONENT_LIST="${MY_ATM_MODS} ${MY_OCN_MODS} ${MY_HYD_MODS} ${MY_WAV_MODS} ${MY_MSC_MODS}"


##################################################
### BEG:: UTILITY FUNCTIONS
##################################################

###========================================
### isInteger()
### Usage:      isInteger var
### Parameters: var
### Returns:    1 if var is not an integer (0 is an integer as well)
###             0 in any other case
### Echoes:     NONE
###========================================
isInteger()
{
  local -i retval=1

  [ $# -eq 0 ] && return ${retval}

  if [ "${1:-UNDEF}" -eq "${1}" ] 2>/dev/null
  then
    retval=0
  fi

  return ${retval}
}

###========================================
### getInteger()
### Usage:      getInteger int
### Parameters: int (int >=0 or, int < 0)
### Returns:    1 if var is not an integer
###             0 in any other case
### Echoes:     int, if it is a valid integer (including 0),
###             in any other case echoes an empty string
###========================================
getInteger()
{
  local -i retval=0
  local echoval= minus=

  # strip spaces, '+' signs and '-' signs
  # if the first character of the string is '-', set the minus variable
  echoval="$( echo "${1}" | sed 's/[[:space:]+]//g' )"
  [ "X$( echo "${echoval:0:1}" )" = "X-" ] && minus="-"
  echoval="${minus}$( echo "${echoval}" | sed 's/[[:space:]-]//g' )"

  if isInteger ${echoval}; then
    echoval="$(echo "scale=0; ${echoval} + 0" | bc -ql 2>/dev/null)"
    retval=$?
    echoval="${echoval:-0}"
  else
    echoval=
    retval=1
  fi

  echo -n ${echoval}

  return ${retval}
}

###========================================
### getPosInteger()
### Usage:      getPosInteger posint
### Parameters: posint (posint >= 0)
### Returns:    1 if var is not a positive integer
###             0 in any other case
### Echoes:     posint if it is a valid positive integer
###             (including 0), in any other case echoes an
###             empty string
###========================================
getPosInteger()
{
  local -i retval=0
  local echoval=

  echoval=$( getInteger "${1}" )
  retval=$?

  if [ ${retval} -ne 0 ] ; then
    echoval=
    retval=1
  else
    if [ ${echoval} -lt 0 ]; then
      echoval=
      retval=1
    fi
  fi

  echo -n ${echoval}

  return ${retval}
}

###========================================
### getYesNo()
### Usage:      getYesNo value
### Parameters:
###   value : The input value (the value of a parameter)
###           The value of a bash parameter that is checked
###           against TRUE/FALSE. If the value is one of:
###             ">=1|y|yes|yea|yeah|yep"
###           then the value of parameter is TRUE (answer = yes).
###           If the value is one of:
###             "<=0|n|no|not|nop|nope"
###           then the value of parameter is FALSE (answer = no).
###           If the value is empty then the value of parameter
###           is FALSE (answer = no)
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : A "yes" or "no" answer.
###
### getYesNo: Checks if a parameter is assigned a TRUE/FALSE value.
###========================================
getYesNo()
{
  local param answer
  
  param="$( echo "${1}" | tr '[:upper:]' '[:lower:]' )"

  if [ "${param}" -eq "${param}" ] 2>/dev/null
  then
    [ ${param} -le 0 ] && param=0
    [ ${param} -gt 0 ] && param=1
  fi

  case "${param}" in
    1|y|yes|yea|yeah|yep) answer="yes" ;;
     0|n|no|not|nop|nope) answer="no"  ;;
                       *) answer=""    ;; # DEFAULT
  esac

  echo -n "${answer}"
}

###========================================
### toUPPER()
### Usage:      toUPPER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all upper case string
###
### toUPPER: Converts a string to an all upper case string
###========================================
function toUPPER()
{
  echo "${1}" | tr '[:lower:]' '[:upper:]'
}

###========================================
### toLOWER()
### Usage:      toLOWER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all lower case string
###
### toLOWER: Converts a string to an all lower case string
###========================================
function toLOWER()
{
  echo "${1}" | tr '[:upper:]' '[:lower:]'
}

###========================================
### strESC()
### Usage:      strESC string
### Parameters:
###   string : The input string
###            The input string on which this function is applied
###            to escape special characters used in bash/sed ...
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The modified string with its special characters escaped
###
### strESC: Escapes special characters in a string: "'()/[]*.
###========================================
strESC()
{
  echo -n "$( echo "${*}" | sed -e "s/[\"\'\(\)\/\*\!]/\\\&/g;s/\[/\\\&/g;s/\]/\\\&/g" )"
}

strESC1()
{
  echo -n "$( echo "${*}" | sed -e "s/[\&\/\*\!]/\\\&/g;s/\[/\\\&/g;s/\]/\\\&/g" )"
}

###========================================
### strTrim()
### Usage:      strTrim s1 flag
### Parameters:
###     s1 : The input string
###   flag : Integer
###          A value that controls the action of strTrim.
###          If flag is zero or not present, trailing blanks are removed.
###          Leading blanks are removed if it is equal to 1.
###          Both are removed if it is equal to 2.
###          In any other case, trailing blanks are removed.
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : s1 with all leading and/or trailing
###           white spaces removed.
###
### strTrim: Removes all leading and/or trailing white spaces
###          from the input string
###========================================
function strTrim ()
{
  local trimFLG="${2:-0}"
  local out_str=

  case ${trimFLG} in
    0) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
    1) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//')" ;;
    2) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" ;;
    *) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
  esac

  echo -n ${out_str}
}
##################################################
### END:: UTILITY FUNCTIONS
##################################################


##################################################
### BEG:: MODELLING SYSTEM BUILD FUNCTIONS
##################################################

###========================================
### checkFuncOpt()
###
### Usage:      checkFuncOpt opt_name
###
### Parameters:
###   opt_name: The name of the option to a function
###
### Returns : Exits on error
###
### Exports : __OPTION_LIST
###
### Echoes  : NONE
###
### checkFuncOpt: Checks if an option to a function is already supplied.
###========================================
checkFuncOpt() {
  local opt_inp opt_list

  [ $# -eq 0 ] && return -1

  opt_inp="$( strTrim "${1}" 2 )"
  opt_inp="$( echo "${opt_inp}" | sed 's/^[-]*//' )"

  opt_list="$( strTrim "${__OPTION_LIST}" 2 )"
  [ -n ${opt_list:+1} ] && \
    opt_list=":$( echo "${opt_list}" | sed 's/ /:/g' ):"

  [ "$( echo "${opt_list}" | egrep -o ":${opt_inp}:" )" ] && return 1

  __OPTION_LIST="${__OPTION_LIST} ${opt_inp}"
  export __OPTION_LIST

  return 0
}

###========================================
### ParseArgs()
###
### Usage:      ParseArgs args
###
### Parameters: args = the script options
###
### Returns:    0
###
### Echoes:     NONE
###
### Gets the supplied options to the script.
###========================================
ParseArgs()
{
  local nm_func=$( basename ${BASH_SOURCE[${#BASH_SOURCE[@]}-1]} )

  local opt_all opt_opt opt_arg opt_chk

  local t_VAR
  local ans0 ans ival intN
  local all_evars

  all_evars="MY_CLEAN MY_COMPILER MY_COMPONENT MY_EXECUTABLES MY_OS MY_PARALLEL MY_PARMAKE MY_PLATFORM MY_VERBOSE"

  for ival in ${all_evars}; do unset __${ival}; done


  __MY_CLEAN=0
  __MY_EXECUTABLES=
  __MY_COMPILER=intel
  __MY_COMPONENT="${MY_COMPONENT_DEFAULT}"
  __MY_OS=
  __MY_PARALLEL=1
  __MY_PARMAKE=1
  __MY_PLATFORM=
  __MY_VERBOSE=
          

  # -----
  # Process the function options
  opt_all=( build_exec c clean compiler component j par parallel os plat platform v verbose h help )
  opt_all=":$( echo "${opt_all[@]/#/-} ${opt_all[@]/#/--}" | sed 's/ /:/g' ):"

  unset __OPTION_LIST
  while test $# -gt 0; do
    case "${1}" in
      -[^-]*=* | --[^-]*=* )
        opt_opt="$( toLOWER "$( echo "${1}" | sed 's/=.*//' )" )"
        len=$(( ${#opt_opt} + 1 ))
        opt_arg="$( strTrim "$( echo "${1:${len}}" )" 2 )"
        [ "$( echo "${opt_all}" | egrep -o ":${opt_arg}:" )" ] && \
          opt_arg=
        ;;
      -[^-]* | --[^-]* )
        opt_opt="$( toLOWER "${1}" )"
        opt_chk="$( toLOWER "$( echo "${2}" | sed 's/=.*//' )" )"
        if [ "$( echo "${opt_all}" | egrep -o ":${opt_chk}:" )" ]; then
          opt_arg=
        else
          opt_arg="$( strTrim "$( echo "${2}" )" )"
        fi
        ;;
      *)
        opt_opt=
        opt_arg=
        ;;
    esac

    case "${opt_opt}" in
      -build_exec | --build_exec )
          checkFuncOpt "--build_exec"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_EXECUTABLES="$( strTrim "${opt_arg}" )"
            fi
          fi
        ;;
      -c | --c | -clean | --clean )
          checkFuncOpt "--clean"
          if [ $? -eq 0 ]; then
            __MY_CLEAN=1
            if [ "X${opt_arg}" != "X" ]; then
              if `isInteger "${opt_arg}"` ; then
                __MY_CLEAN=$( echo "${opt_arg}" )
                [ ${opt_arg} -le -3 ] && __MY_CLEAN=-3
                [ ${opt_arg} -ge  2 ] && __MY_CLEAN=2
              else
                __MY_CLEAN=0
                [ "$( getYesNo "${opt_arg}" )" = "yes" ] && __MY_CLEAN=1
              fi
            fi
          fi
        ;;
      -compiler | --compiler )
          checkFuncOpt "--compiler"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_COMPILER="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
            fi
          fi
        ;;
      -component | --component )
          checkFuncOpt "--component"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_COMPONENT="$( strTrim "${opt_arg}" )"
            fi
          fi
        ;;
      -j | --j )
          checkFuncOpt "--j"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_PARMAKE=1
              t_VAR="$( getPosInteger "${opt_arg}" )"
              [ ! -z "${t_VAR}" ] && __MY_PARMAKE=${t_VAR}
            fi
          fi
        ;;
      -par | --par | -parallel | --parallel )
          checkFuncOpt "--parallel"
          if [ $? -eq 0 ]; then
            __MY_PARALLEL=1
            if [ "X${opt_arg}" != "X" ]; then
              if `isInteger "${opt_arg}"` ; then
                __MY_PARALLEL=0
                [ ${opt_arg} -ge 1 ] && __MY_PARALLEL=1
              else
                __MY_PARALLEL=0
                [ "$( getYesNo "${opt_arg}" )" = "yes" ] && __MY_PARALLEL=1
              fi
            fi
          fi
        ;;
      -os | --os )
          checkFuncOpt "--os"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_OS="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
            fi
          fi
        ;;
      -plat | --plat | -platform | --platform)
          checkFuncOpt "--platform"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_PLATFORM="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
            fi
          fi
        ;;
      -v | --v | -verbose | --verbose )
          checkFuncOpt "--verbose"
          if [ $? -eq 0 ]; then
            __MY_VERBOSE=b
            if [ "X${opt_arg}" != "X" ]; then
            __MY_VERBOSE="$( echo "$( strTrim "${opt_arg}" 2 )" | sed 's/[[:space:]]/,/g' )"
            fi
          fi
        ;;
      -h | -help | --h | --help )
          UsageBuild ${nm_func}
        ;;
      *) ;; # DEFAULT
    esac
    shift
    opt_opt= 
    opt_arg=
  done
  unset __OPTION_LIST
  # -----

  if [ -z "${__MY_OS}" ]; then
    case "$(uname -s)" in
      Darwin ) __MY_OS="macosx" ;;
      Linux  ) __MY_OS="linux"  ;;
            *) __MY_OS="linux"  ;; # DEFAULT
    esac
  fi

  if [ -z "${__MY_PLATFORM}" ]; then
    case "$(uname -s)" in
      Darwin ) __MY_PLATFORM="macosx" ;;
      Linux  ) __MY_PLATFORM="linux"  ;;
            *) __MY_PLATFORM="linux"  ;; # DEFAULT
    esac
  fi

  # Export the values of all __* variables.
  for ival in ${all_evars}
  do
    ans0="$( eval "echo \${$(echo ${ival}):-}" )"
    ans="$( eval "echo \${$(echo __${ival}):-}" )"
    ans=${ans:-${ans0:-}}

    eval "${ival}=\${ans}"
    export ${ival}

    unset __${ival}
  done

  return 0
}

###========================================
### UsageBuild()
###
### Usage:      UsageBuild
###
### Parameters: NONE
###
### Returns : Exits on error
###
### Exports : NONE
###
### Echoes  : NONE
###
### UsageBuild: Prints all usage options of the build script.
###========================================
UsageBuild()
{
  local nm="$( basename ${0} )"

  echo
  echo "Usage: \"${nm}\" [{-|--}option1{=|space}[option_value1]] [{-|--}option2{=|space}[option_value2]] ..."
  echo

  echo "  -h|-help|--h|--help"
  echo "    Show this help screen."
  echo
  #---
  echo "  -c|--c|-clean|--clean [=|space] \"0|1|yes|no\" (OPTIONAL)."
  echo "    Only clean the already compiled CMake build system."
  echo "    Default: 0|no."
  echo
  #---
  echo "  -compiler|--compiler [=|space] \"compiling_system\" (OPTIONAL)."
  echo "    The compiling system to use (${MY_COMPILING_SYTEMS})."
  echo "    Default: intel."
  echo
  #---
  echo "  -component|--component [=|space] \"component_list\" (OPTIONAL)."
  echo "    The component(s) to use (${MY_COMPONENT_LIST})."
  echo "    Default: \"${MY_COMPONENT_DEFAULT}\"."
  echo
  #---
  echo "  -build_exec|--build_exec [=|space] \"executable_list\" (OPTIONAL)."
  echo "    The executables(s) to build (e.g. --build_exec=\"padcirc pahm\")."
  echo "    Default: none."
  echo
  #---
  echo "  -j|--j [=|space] \"N\" (OPTIONAL)."
  echo "    Define the number of make jobs to run simultaneously."
  echo "    Default: 1."
  echo
  #---
  echo "  -par|--par|-parallel|--parallel [=|space] \"0|1|yes|no\" (OPTIONAL)."
  echo "    Activate the use of parallel compilers."
  echo "    Default: 1|yes."
  echo
  #---
  echo "  -os|--os [=|space] \"OS string\" (OPTIONAL)."
  echo "    The name of the Operating system."
  echo "    Supported OSes: linux macosx."
  echo "    Default: current OS."
  echo
  #---
  echo "  -plat|--plat|-platform|--platform [=|space] \"platform\" (OPTIONAL)."
  echo "    The name of the compute HPC platform to consider."
  echo "    Selecting a platform, environment modules specific to that platform are loaded"
  echo "    and corresponding environment variables are set."
  echo "    Supported platforms: ${MY_COMPILING_PLATFORMS}."
  echo "    Default: OS."
  echo
  #---
  echo "  -v|--v|-verbose|--verbose [=|space] \"a,b,v,i,j,m,n\" (any combination, OPTIONAL)."
  echo "    Enable verbosity in the make files during compilation."
  echo "      a (all)      : all types of debugging output are enabled"
  echo "      n (none)     : disable all debugging currently enabled"
  echo "      b (basic)    : basic debugging and whether the build was successful or not"
  echo "      v (verbose)  : a level above basic"
  echo "      i (implicit) : prints messages describing the implicit rule searches for each target"
  echo "      j (jobs)     : prints messages giving details on the invocation of specific sub-commands"
  echo "      m (makefile) : enables messages while rebuilding makefiles"
  echo "    Default:none."
  echo
  #---

  exit 0
}

###========================================
### getCompilerNames()
###
### Usage:      getCompilerNames compile_family
###
### Parameters: compile_family = one of: gnu, intel, pgi
###
### Returns : error status
###
### Exports : CC CXX FC F90 PCC PCXX PFC PF90
###
### Echoes  : NONE
###
### getCompilerNames: Exports the compiler names for a compiler family.
###========================================
 getCompilerNames() {
  local cmp_family
  local err=0

  [ $# -eq 0 ] && return ${err}

  cmp_family="$( toLOWER "${1}" )"

  case "${cmp_family}" in
    gnu)
       CC=gcc
       CXX=g++
       FC=gfortran
       F90=gfortran
       PCC=${PCC:-mpicc}
       PCXX=${PCXX:-mpicxx}
       PFC=${PFC:-mpif90}
       PF90=${PF90:-${PFC}}
       ;;
    intel)
       CC=icc
       CXX=icpc
       FC=ifort
       F90=ifort
       PCC=${PCC:-mpiicc}
       PCXX=${PCXX:-mpiicpc}
       PFC=${PFC:-mpiifort}
       PF90=${PF90:-${PFC}}
       ;;
    pgi)
       CC=pgcc
       CXX=pgc++
       FC=pgfortran
       F90=pgfortran
       PCC=${PCC:-pgcc}
       PCXX=${PCXX:-pgc++}
       PFC==${PFC:-pgfortran}
       PF90=${PF90:-${PFC}}
       ;;
    *) # No defaults. Give the user the option to define the environment variables
       # CC, CXX, FC, F90 before running this script.
       #echo "WARNING: The supplied compiling system \"${COMPILER}\", is not suported."
       #echo "         Supported systems are anyone of: compiling_system=[${MY_COMPILING_SYTEMS}]"
       #echo "         Use: --compiler=compiling_system."
       #echo "         Will continue with OS defaults."
       CC=${CC:-}
       CXX=${CXX:-}
       FC=${FC:-}
       F90=${F90:-}
       PCC=${CC:-}
       PCXX=${CXX:-}
       PFC=${FC:-}
       PF90=${F90:-}

       err=1
       ;;
  esac

  export CC CXX FC F90 PCC PCXX PFC PF90

  return ${err}
}

###========================================
### getNEMSEnvVars()
###
### Usage:      getNEMSEnvVars
###
### Parameters: NONE
###
### Returns : error status
###
### Exports : CLEAN COMPILER COMPONENT PARALLEL BUILD_EXECS OS PLATFORM PARMAKE VERBOSE
###           NEMS_COMPILER NEMS_PARALLEL NEMS_PLATFORM MACHINE_ID FULL_MACHINE_ID
###           APP_DIR APPMODS_DIR modFILE modDIR nemsDIR compFNAME
###
### Echoes  : NONE
###
### getNEMSEnvVars: Exports all the NEMS environment variables.
###========================================
 getNEMSEnvVars() {
  local src_name src_dir component_ww3

  if [ -n "${APP_DIR:+1}" ]; then
    src_dir="${APP_DIR}"
  else
    if [ -n "${1:+1}" ]; then
      src_dir="${1}"
    else
      # Get the directory where the script is located
      if [[ $(uname -s) == Darwin ]]; then
        readonly src_name="$( grealpath -s "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}" )"
        readonly src_dir="$(cd "$(dirname "${src_name}" )" && pwd -P)"
      else
        readonly src_name="$( realpath -s "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}" )"
        readonly src_dir="$(cd "$(dirname "$(realpath -s "${BASH_SOURCE[0]}")" )" && pwd -P)"
      fi
    fi
  fi

  CLEAN=${MY_CLEAN:-0}
  export CLEAN

  COMPILER="$( toLOWER "$( basename "${MY_COMPILER}" )" )"
  export COMPILER

  COMPONENT="$( toUPPER "${MY_COMPONENT}" )"
  export COMPONENT

  PARALLEL=${MY_PARALLEL:-1}
  export PARALLEL

  BUILD_EXECS="${MY_EXECUTABLES}"
  export BUILD_EXECS

  OS="$( toLOWER "${MY_OS}" )"
  export OS

  if [ -n "${MY_PLATFORM:+1}" ]; then
    PLATFORM="$( toLOWER "${MY_PLATFORM}" )"
  else
    PLATFORM="${OS}"
  fi
  export PLATFORM

  if [ "${MY_PARMAKE:0}" -gt 1 ]; then
    PARMAKE="${MY_PARMAKE}"
  else
    PARMAKE=
  fi
  export PARMAKE

  VERBOSE="$( toLOWER "${MY_VERBOSE}" )"
  export VERBOSE

  ##### Customize the NEMS.x filename to include the component names
  compFNAME=
  if [ -n "${COMPONENT:+1}" ]; then
    compFNAME="$( strTrim "$( toLOWER "${COMPONENT}" )" )"
    compFNAME="$( echo "${compFNAME}" | sed 's/ /_/g' )"
  fi
  export compFNAME
  #####

  ##### Get the WW3 related environment variables
  WW3_CONFOPT=
  WW3_COMP=
  WWATCH3_NETCDF=
  component_ww3="$( echo "${COMPONENT}" | sed 's/ /:/g' )"
  if [[ :${component_ww3}: == *:"WW3":* ]]; then
    WW3_CONFOPT="${COMPILER}"
    WW3_COMP="${COMPILER}"
    WWATCH3_NETCDF=NC4
  fi
  export WW3_CONFOPT WW3_COMP WWATCH3_NETCDF
  #####
  
  # Export some important environment variables for NEMS and for other models
  export NEMS_COMPILER="${COMPILER}"
  export NEMS_PARALLEL="${PARALLEL}"
  export NEMS_PLATFORM="${PLATFORM}"
  export MACHINE_ID="${PLATFORM}"
  export FULL_MACHINE_ID="${PLATFORM}"

  export APP_DIR="${APP_DIR}"
  export APPMODS_DIR="${APPMODS_DIR:-${APP_DIR}}"

  export modFILE="envmodules${COMPILER:+_${COMPILER}}${PLATFORM:+.${PLATFORM}}"

  # This used in NEMS to get the configuration flags for the chosen compiler
  # in the top level conf directory. Supported OSes are linux and macosx.
  # Sometimes we might need to specify special flags not founf in the default
  # files for s pecific platform
  if [ ! -f "${src_dir}/conf/configure.nems.${FULL_MACHINE_ID}.${NEMS_COMPILER}" ]; then
    export BUILD_TARGET=${OS}.${NEMS_COMPILER}
  fi

  if [ ! -f "${src_dir}/conf/externals.nems.${FULL_MACHINE_ID}" ]; then
    export EXTERNALS_NEMS="externals.nems"
  fi

  # Get the project directories and perform a basic check on them
  readonly nemsDIR="${src_dir}/NEMS"
  if [ ! -f "${nemsDIR}/NEMSAppBuilder" ]; then
    echo "The project directory \"${nemsDIR}\" does not appear to contain NEMSAppBuilder."
    echo "Is this the correct NEMS directory?"
    echo "You might need to set the environment variable APP_DIR before running this script."
    echo "Exiting ..."
    exit 1
  fi
  export nemsDIR

  readonly modDIR="${APPMODS_DIR:-${src_dir}/modulefiles}"
  if [ ! -f "${modDIR}/${modFILE}" ]; then
    echo
    echo "The modulefiles directory \"${modDIR}\" does not appear to contain the module file: ${modFILE}."
    echo "Is this the correct \"modulefiles\" directory?"
    echo "You might need to set the environment variable \"APPMODS_DIR\" to point to a custom modulefiles directory before running this script."
    echo "Exiting ..."
    echo
    exit 1
  else
    # Source the environment module
    source ${modDIR}/${modFILE}
  fi
  export modDIR
}

###========================================
### checkNEMSComponents()
###
### Usage:      checkNEMSComponents
###
### Parameters: NONE
###
### Returns : Exits on error
###
### Exports : NONE
###
### Echoes  : NONE
###
### checkNEMSComponents: Checks if a user supplied modeling component is supported.
###========================================
 checkNEMSComponents() {
  local comp_user comp_all
  local icomp

  comp_user="$( toUPPER "${COMPONENT}" )"
  [ -z "${comp_user}" ] && \
    comp_user="$( toUPPER "${MY_COMPONENT}" )"

  comp_all="$( toUPPER "${MY_COMPONENT_LIST}" )"

  for icomp in ${comp_user}
  do
    if [[ "${comp_all}" != *"${icomp}"* ]]; then
      echo "The modeling component \"${icomp}\" is not supported."
      echo "Please adjust your component list and re-run the script."
      echo "Exiting ..."
      exit 1
      echo "icomp = ${icomp}"
    fi
  done
}

###========================================
### compileNems()
###
### Usage:      compileNems compile_type
###
### Parameters: compile_type = one of: clean|distclean or, build|compile
###
### Returns : error status
###
### Exports : NONE
###
### Echoes  : NONE
###
### compileNems: Uses environment variables to compile a NEMS application.
###========================================
compileNems() {
  local cmp_type cmp_make cmp_comp cmp_mjob
  local err=0

  [ $# -eq 0 ] && return ${err}

  cmp_type="$( toLOWER "${1}" )"
  cmp_make=GNUmakefile   # This is the top level NEMS Makefile
  cmp_comp="${COMPONENT:+COMPONENTS=\"${COMPONENT}\"}"
  cmp_mjob="${PARMAKE:+-j ${PARMAKE}}"
  cmp_verb="${VERBOSE:+--debug=${VERBOSE}}"

  case "${cmp_type}" in
    "clean"|"distclean" )
      if [ -f  "${cmp_make}" ]; then
        echo
        echo "compileNems :: Cleaning: make -f ${cmp_make} ${cmp_type} ${cmp_comp}"
        eval "make ${cmp_verb} -f ${cmp_make} ${cmp_type} ${cmp_comp}"
        err=$?
        if [ "${cmp_type}" = "distclean" ]; then
          rm -fv exe/NEMS*.x
        fi
      else
        echo "compileNems :: Cleaning: no makefile found: makefile = ${cmp_make}"
        err=1
      fi
      ;;
    "build"|"compile" )
      if [ -f  "${cmp_make}" ]; then
        echo
        echo "compileNems :: Compiling: make ${cmp_mjob} -f ${cmp_make} ${cmp_type} ${cmp_comp}"
        eval "make ${cmp_verb} ${cmp_mjob} -f ${cmp_make} ${cmp_type} ${cmp_comp}"
        err=$?
      else
        echo "compileNems :: Compiling: no makefile found: makefile = ${cmp_make}"
        err=1
      fi
      ;;
    * ) err=0 ;; # Do nothing
  esac

  return ${err}
}

###========================================
### installNems()
###
### Usage:      installNems compile_type
###
### Parameters: NONE
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : NONE
###
### installNems: Installs all NEMS compiled components.
###========================================
# Need to have specific model components install functions
# TODO - Panagiotis Velissariou
installNems() {
  local cmp_comp icmp
  local instdir
  local CPBIN="/bin/cp -fpv"
  local RMBIN="/bin/rm -fv"

  instdir="ALLBIN_INSTALL"

  cmp_comp="${COMPONENT}"

  [ ! -d "${instdir}" ] && mkdir -p ${instdir}

  for icmp in ${cmp_comp}
  do
    indir="${icmp}_INSTALL"
    
    if [ -d ${indir} ]; then
      echo
      echo "   --- Installing from: ${indir} to ${instdir} ---"
      ${CPBIN} ${indir}/* ${instdir}/
    fi

    ###### Extra ADCIRC files
    if [ "${icmp}" == "ADCIRC" ]; then
      echo
      echo "   --- Installing from: ${icmp} to ${instdir} ---"
      for iprog in adcprep aswip adcirc padcirc tide_fac
      do
        prog="$( find -L ${icmp} -type f -name ${iprog} | head -1 )"

        if [ -n "${prog:+1}" ]; then
          ${CPBIN} ${prog} ${instdir}/
        fi
      done
    fi
    ######
  done

  ###### Install the NEMS/exe/NEMS* files
  echo
  echo "   --- Installing from: NEMS/exe to ${instdir} ---"
  for iprog in NEMS/exe/NEMS*.x
  do
    if [ -f "${iprog}" ]; then
      ${CPBIN} ${iprog} ${instdir}/
    fi
  done

  ###### Remove un-needed files from instdir
  echo
  echo "   --- Removing files that are not needed from: ${instdir} ---"
  ${RMBIN} ${instdir}/*.mk ${instdir}/*.mod
}
